# .github/workflows/repo-health.yml
name: Repo Health (Last Commit Dates)

on:
  workflow_dispatch:
    inputs:
      owners:
        description: "Comma-separated list of owners (users/orgs)"
        required: true
        default: "shinedog,adriaanse-dev"
  schedule:
    - cron: "17 3 * * *"  # daily at 03:17 America/New_York

permissions:
  contents: read

jobs:
  last-commit-dates:
    runs-on: ubuntu-latest
    env:
      OWNERS_CSV: ${{ inputs.owners || 'shinedog,adriaanse-dev' }}
      # REQUIRED for private repos across accounts/orgs:
      # Add repo secret GH_TOKEN_RO (Fine-grained: Read-only on all desired repos; Classic: scopes repo, read:org)
      GH_TOKEN_EFFECTIVE: ${{ secrets.GH_TOKEN_RO || github.token }}
    steps:
      - name: Prepare workspace
        run: |
          set -euo pipefail
          mkdir -p reports/${{ github.run_id }}
          echo "$OWNERS_CSV" | tr ',' '\n' | awk '{$1=$1};1' > owners.txt
          echo "Owners:" && cat owners.txt

      - name: Fetch repositories via GraphQL for each owner (PRIVATE supported)
        env:
          GH_TOKEN: ${{ env.GH_TOKEN_EFFECTIVE }}
        run: |
          set -euo pipefail
          q='
          query($owner:String!, $after:String) {
            repositoryOwner(login:$owner) {
              repositories(
                first: 100,
                after: $after,
                ownerAffiliations: [OWNER, ORGANIZATION_MEMBER, COLLABORATOR],
                orderBy: {field: NAME, direction: ASC}
              ) {
                pageInfo { hasNextPage endCursor }
                nodes {
                  name
                  isPrivate
                  isFork
                  isArchived
                  isEmpty
                  pushedAt
                  defaultBranchRef {
                    name
                    target { ... on Commit { committedDate } }
                  }
                }
              }
            }
          }'

          echo '[]' > repos_all.json

          while read -r owner; do
            [ -z "$owner" ] && continue
            cursor=""
            while :; do
              if [ -z "$cursor" ]; then
                resp=$(gh api graphql -f owner="$owner" -f query="$q")
              else
                resp=$(gh api graphql -f owner="$owner" -f query="$q" -f after="$cursor")
              fi

              # Validate access
              if [ "$(jq -r '.data.repositoryOwner' <<<"$resp")" = "null" ]; then
                echo "WARN: No access to '$owner' with current token; skipping." >&2
                break
              fi

              nodes=$(jq --arg owner "$owner" '
                .data.repositoryOwner.repositories.nodes
                | map(. + { __owner: $owner })
              ' <<<"$resp")

              jq -s '.[0] + .[1]' repos_all.json <(echo "$nodes") > tmp.json && mv tmp.json repos_all.json

              hasNext=$(jq -r '.data.repositoryOwner.repositories.pageInfo.hasNextPage' <<<"$resp")
              [ "$hasNext" != "true" ] && break
              cursor=$(jq -r '.data.repositoryOwner.repositories.pageInfo.endCursor' <<<"$resp")
            done
          done < owners.txt

          out="reports/${{ github.run_id }}/last_commit_dates.csv"
          echo 'owner,repo,default_branch,last_commit_date,source,private,fork,archived,empty,pushed_at' > "$out"

          jq -r '
            .[] |
            {
              owner: .__owner,
              repo: .name,
              default_branch: (.defaultBranchRef.name // ""),
              commit_date: (.defaultBranchRef.target.committedDate // ""),
              pushed_at: (.pushedAt // ""),
              private: .isPrivate,
              fork: .isFork,
              archived: .isArchived,
              empty: .isEmpty
            }
            | .source = (if (.commit_date|length)>0 then "defaultBranchRef" else "pushedAt" end)
            | .last = (if (.commit_date|length)>0 then .commit_date else .pushed_at end)
            | [ .owner, .repo, .default_branch, .last, .source, (.private|tostring), (.fork|tostring), (.archived|tostring), (.empty|tostring), .pushed_at ]
            | @csv
          ' repos_all.json >> "$out"

          {
            echo "### Last Commit Dates"
            echo
            echo "| Owner | Repo | Default Branch | Last Commit (ISO) | Source | Private | Archived |"
            echo "|-------|------|----------------|-------------------|--------|---------|----------|"
            awk -F',' 'NR>1 {
              for (i=1;i<=7;i++) { gsub(/^"|"$/, "", $i) }
              printf("| %s | %s | %s | %s | %s | %s | %s |\n",$1,$2,$3,$4,$5,$6,$8)
            }' "$out"
          } > "reports/${{ github.run_id }}/summary.md"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-health-${{ github.run_id }}
          path: reports/${{ github.run_id }}/
          if-no-files-found: error