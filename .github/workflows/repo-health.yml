# .github/workflows/repo-health.yml
name: Repo Health (Last Commit Dates)

on:
  workflow_dispatch:
    inputs:
      owner:
        description: "GitHub username or org to inspect"
        required: true
        default: "shinedog"
  schedule:
    - cron: "17 3 * * *"  # daily

permissions:
  contents: read

jobs:
  last-commit-dates:
    runs-on: ubuntu-latest
    env:
      OWNER: ${{ inputs.owner || 'shinedog' }}
      # Prefer a PAT with repo/read:org for private repos. Falls back to GITHUB_TOKEN (public).
      GH_TOKEN_EFFECTIVE: ${{ secrets.GH_TOKEN_RO || github.token }}
    steps:
      - name: Prepare workspace
        run: |
          set -euo pipefail
          mkdir -p reports/${{ github.run_id }}

      - name: Fetch repositories via GraphQL (paginated)
        env:
          GH_TOKEN: ${{ env.GH_TOKEN_EFFECTIVE }}
        run: |
          set -euo pipefail
          owner="${OWNER}"

          q='
          query($owner:String!, $after:String) {
            rateLimit { remaining resetAt }
            repositoryOwner(login:$owner) {
              __typename
              repositories(first: 100, after: $after, ownerAffiliations: OWNER, orderBy: {field: NAME, direction: ASC}) {
                pageInfo { hasNextPage endCursor }
                nodes {
                  name
                  isPrivate
                  isFork
                  isArchived
                  isEmpty
                  pushedAt
                  defaultBranchRef {
                    name
                    target {
                      ... on Commit { committedDate }
                    }
                  }
                }
              }
            }
          }'

          # paginate
          cursor="null"
          echo '[]' > repos_all.json
          while :; do
            resp=$(gh api graphql -f owner="$owner" -f after="$cursor" -f query="$q")
            # append nodes
            nodes=$(jq '.data.repositoryOwner.repositories.nodes' <<<"$resp")
            jq -s '.[0] + .[1]' repos_all.json <(echo "$nodes") > tmp.json && mv tmp.json repos_all.json
            # next page?
            hasNext=$(jq -r '.data.repositoryOwner.repositories.pageInfo.hasNextPage' <<<"$resp")
            if [ "$hasNext" != "true" ]; then break; fi
            cursor=$(jq -r '.data.repositoryOwner.repositories.pageInfo.endCursor | @json' <<<"$resp")
          done

          # Write CSV
          out="reports/${{ github.run_id }}/last_commit_dates.csv"
          echo 'repo,default_branch,last_commit_date,source,private,fork,archived,empty,pushed_at' > "$out"
          jq -r '
            .[] | {
              repo: .name,
              default_branch: (.defaultBranchRef.name // ""),
              commit_date: (.defaultBranchRef.target.committedDate // ""),
              pushed_at: (.pushedAt // ""),
              private: .isPrivate,
              fork: .isFork,
              archived: .isArchived,
              empty: .isEmpty
            } |
            .source = (if (.commit_date|length)>0 then "defaultBranchRef" else "pushedAt" end) |
            .last = (if (.commit_date|length)>0 then .commit_date else .pushed_at end) |
            [ .repo, .default_branch, .last, .source, (.private|tostring), (.fork|tostring), (.archived|tostring), (.empty|tostring), .pushed_at ]
            | @csv
          ' repos_all.json >> "$out"

          # Markdown summary (no error JSON possible here)
          {
            echo "### Last Commit Dates for \`$owner\`"
            echo
            echo "| Repo | Default Branch | Last Commit (ISO) | Source | Private | Archived |"
            echo "|------|----------------|-------------------|--------|---------|----------|"
            awk -F',' 'NR>1 {
              gsub(/^"|"$/, "", $1); gsub(/^"|"$/, "", $2); gsub(/^"|"$/, "", $3); gsub(/^"|"$/, "", $4);
              printf("| %s | %s | %s | %s | %s | %s |\n",$1,$2,$3,$4,$5,$7)
            }' "$out"
          } > "reports/${{ github.run_id }}/summary.md"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-health-${{ github.run_id }}
          path: reports/${{ github.run_id }}/
          if-no-files-found: error